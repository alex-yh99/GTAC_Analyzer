{"gtac_2014": {"titles": ["", "Opening Remarks", "Opening Keynote - Move Fast & Don't Break Things", "Automation for a Better Web", "Make Chrome the best mobile browser", "A Test Automation Language for Behavioral Models", "Test coverage at Google", "CATJS: Applications That Test Themselves", "Scalable Continuous Integration - Using Open Source", "I Don't Test Often ... But When I Do, I Test in Production", "The Importance of Automated Testing on Real and Virtual Mobile Devices", "Free Tests Are Better Than Free Bananas: Using Data Mining and Machine Learning To Automate Real-Time Production Monitoring", "Test Automation on an Infrared Set-top Box", "The Challenge of Fairly Comparing Cloud Providers and What We're Doing About It", "Never Send a Human to do a Machine\u2019s Job: How Facebook uses bots to manage tests", "Espresso, Spoon, Wiremock, Oh my! ( or how I learned to stop worrying and love Android testing )", "Google BigQuery Analytics", "Selendroid - Selenium for Android", "Maintaining Sanity In A Hypermedia World", "Fire Away Sooner And Faster With MSL!", "The Testing User Experience", "Round Table Talk 1 - Mobile Cross-Platform Testing", "Round Table Talk 2 - Document Automation Coverage", "Impact of Community Structure on SAT Solver Performance", "Beyond Coverage: What Lurks in Test Suites?", "Going Green: Cleaning up the Toxic Mobile Environment"], "abstracts": ["", "", "", "The web is the world's most popular application platform, yet poor\n  browser interoperability is an all-too-common cause of dismay and\n  frustration amongst web developers. In order to try improve this\n  situation the W3C has been facilitating a community effort to produce a\n  continually updated, cross-browser, testsuite for the open web; the\n  web-platform-tests.\n\n  In this talk James will introduce the web-platform-tests and describe the\n  tools we have created for driving automation of the tests across a range\n  of desktop browsers, and on mobile devices running Firefox OS. He will\n  show how this software has been designed to meet the challenges of\n  running an externally-sourced, frequently updated, testsuite on hundreds\n  of commits a day in Mozilla's continuous integration system.", "One of the reasons for Chrome\u2019s success has been its core principles of speed, stability, simplicity and security (the 4 S\u2019s). When we released Chrome for Android and iOS, we not only applied the 4 S\u2019s to the browser itself but also to how we do automated testing and the kind of tests we run:", "This talk introduces a test automation language to allow testers to generate tests by using only one behavioral model such as a state machine diagram. Three issues will be addressed: (1) creating mappings from models to executable test code and generating test values, (2) transforming graphs and using coverage criteria to generate test paths, and (3) solving constraints and generating concrete tests.", "Did you ever wonder how testing at Google looks like? What tools we use to help us out and how do we measure and act on test coverage?\n  We will briefly describe the development process at Google, then focus on use of code coverage measurement and how we use code coverage to improve code quality and engineering productivity.\n  In the end, we'll present the vast amount of coverage data, spanning more than 100.000 commits, we have collected and some more widely applicable conclusions we have reached.", "catjs is an Open Source framework that adds the ability for mobile-web apps to test themselves. Simple annotations in your HTML5 code will be translated to embedded tests scripts within the application\u2019s lifecycle. These mobile-web tests can run on any device, operating system and browser. catjs is a quick and easy way to take care of your application\u2019s testing flow.", "Many open source tools are available for continuous integration (CI). Only a few operate well at large scale. And almost none are built to scale in a distributed environment. Come find out the challenges of implementing CI at scale, and one way to put together open source pieces to quickly build your own distributed, scalable CI system.", "Every day, Netflix has more customers consuming more content on an increasing number of client devices. We're also constantly innovating to improve our customers' experience.  Testing in such a rapidly changing environment is a huge challenge, and we've concluded that running tests in our production environment can often be the most efficient way to validate those changes. This talk will cover three test methods that we use in production: simulating all kinds of outages with the Simian Army, looking for regressions using canaries, and measuring test effectiveness with code coverage analysis from production.", "Compared to the web world, mobile testing is a minefield. From different devices, operating systems, networks and locations, there are seemingly an infinite number of variables developers must account for. In this educational session, we will discuss some of the unique challenges that come with optimizing the performance and quality of mobile apps, and strategies for addressing them, including the need for automation, real devices and real user conditions.", "The talk will consist of two tools we internally use, and how we combine them to provide real-time production monitoring for engineers almost for free:", "Come listen how a few solders and some lines of code have opened the rich world of web testing to a set-top box.", "This talk will cover the history of benchmarking from mainframe to Cloud.  The goal is to lay a foundation around where benchmarks started and how they have gotten to where they are. Ideas will be laid out for the future of benchmarking Cloud and how we can do it practically.", "Facebook doesn\u2019t have a test organization, developers own everything from writing their code to testing it to shepherding it into production.  That doesn\u2019t mean we don\u2019t test!  The way that we\u2019ve made this scale has been through automating the lifecycle of tests to keep signal high and noise low.  New tests are considered untrusted and flakiness is quickly flushed out of the tree.  We\u2019ll be talking about what\u2019s worked and what hasn\u2019t to build trust in tests.", "Learn about creating and executing fast and reliable automated Android UI tests. Tools will include Espresso, Spoon, Wiremock and Jenkins. Basic Android and Java development knowledge is assumed.", "BigQuery is Google Cloud's interactive big data service. Users can analyze terabytes of data in a matter seconds through SQL-like queries. It is built on top of Dremel, which Google testers have been using internally for years. We will walk through a couple examples, and show you how you can get started with BigQuery.", "This presentation demonstrates to the audience how easy it is to do mobile test automation. It shows how Selendroid can be used to test native and hybrid Android apps  and how the Selenium Grid can be used for parallel testing on multiple devices. Advances topics like extending Selendroid itself at runtime and doing cross platform tests will be covered as well.", "As Comcast has evolved from being a cable company to a media and technology leader, the engineering teams have also gotten smarter. When Amit joined Comcast Interactive Media (CIM) in 2006, they were a manual-testing shop. After they shipped their first website in 2007, he started creating prototypes for an automated UI-testing infrastructure. He was introduced to Selenium at GTAC 2008 and then returned to Comcast to build an automated testing infrastructure with Selenium Grid, Hudson and Subversion. Today, he works on API testing with deployments to Production every weekday. This is made possible with Python, Git, Gerrit and Anthill.", "MSL supports integration testing of UI code (such as Javascript, HTML, CSS) by deploying locally on a Node.js server and configuring mock HTTP responses from test code using one of our clients (Java, Javascript, or Node.js).  This talk will introduce key features of MSL with a few examples.", "Google's products release frequently, and that requires significant automated testing and \"build-copping\". We are now working to offer our testing infrastructure as part of Google Cloud Platform. This talk will discuss some of the methodology we use to keep our builds green and our products defect-free, and give a preview of how we are exposing this to the world.", "", "", "Modern CDCL SAT solvers routinely solve very large in- dustrial SAT instances in relatively short periods of time. It is clear that these solvers somehow exploit the structure of real-world instances. How- ever, to-date there have been few results that precisely characterise this structure. In this paper, we provide evidence that the community struc- ture of real-world SAT instances is correlated with the running time of CDCL SAT solvers. It has been known for some time that real-world SAT instances, viewed as graphs, have natural communities in them. A community is a sub-graph of the graph of a SAT instance, such that this sub-graph has more internal edges than outgoing to the rest of the graph. The community structure of a graph is often characterised by a quality metric called Q. Intuitively, a graph with high-quality community struc- ture (high Q) is easily separableinto smaller communities, while the one with low Q is not. We provide three results based on empirical data which show that community structure of real-world industrial instances is a bet- ter predictor of the running time of CDCL solvers than other commonly considered factors such as variables and clauses. First, we show that there is a strong correlation between the Q value and Literal Block Distance metric of quality of conflict clauses used in clause-deletion policies in Glucose-like solvers. Second, using regression analysis, we show that the the number of communities and the Q value of the graph of real-world SAT instances is more predictive of the running time of CDCL solvers than traditional metrics like number of variables or clauses. Finally, we show that randomly-generated SAT instances with 0.05 \u2264 Q \u2264 0.13 are dramatically harder to solve for CDCL solvers than otherwise.", "This talk will investigate a number of other dimensions on which to evaluate test suites. The talk claims that better test suites are more maintainable, more usable (for instance, because they run faster, or\n  use fewer resources), and have fewer unjustified failures. In this talk, I'll present and synthesize facts about 10 open-source test suites (from 8,000 to 246,000 lines of code) and evaluate how they are doing.", "We will present tools and techniques for creating fast, stable, hermetic test environments for executing Android tests in both interactive development and continuous integration modes. This builds on the higher level talk we presented at the last GTAC."]}, "gtac_2015": {"titles": ["Opening Remarks", "Opening Keynote", "The Uber Challenge of Cross-Application/Cross-Device Testing", "Robot Assisted Test Automation", "Juggling Chainsaws for Fun and Profit: Lessons Learned from Mobile Cross-Platform Integration Testing", "Mobile Game Test Automation Using Real Devices", "How to Component Test Soup Dumplings", "Chromecast Test Automation", "Using Robots for Android App Testing", "Your Tests Aren't Flaky", "Large-Scale Automated Visual Testing", "Hands Off Regression Testing", "Automated Accessibility Testing for Android Applications", "Statistical Data Sampling", "Nest Automation Infrastructure", "Event Generators", "Multithreaded Test Synthesis", "Enabling Streaming Experiments at Netflix", "Mock the Internet", "Effective Testing of a GPS Monitoring Station Receiver", "Automation on Wearable Devices", "Unified Infra and CI Integration Testing (Docker/Vagrant)", "Eliminating Useless Test Bits", "Coverage is Not Strongly Correlated with Test Suite Effectiveness", "Fake Backends with RpcReplay", "Chrome OS Test Automation Lab"], "abstracts": ["", "J\u00fcrgen Allgayer (Google)", "Soon after joining Uber in March 2015, we encountered an Uber-unique challenge while investigating\n  UI testing tools for our mobile applications. Many of our sanity tests require our rider application\n  and driver application communicating/coordinating their actions with each other in order to complete\n  the end-to-end testing scenario. In this talk, we will present our platform agnostic solution,\n  called Octopus, and discuss how it coordinates communication across different apps running on\n  different devices. This solution can be adopted for any tests that require coordination/communication\n  across different apps or devices (e.g. a multi-user game, multi-user messaging/communication app, etc.)", "OptoFidelity is a Finnish high-tech company with 10 years of experience in developing and delivering\n  R&D test automation solutions. This talk will include our experiences and future outlook of\n  non-intrusive test methods used in mobile device UI performance testing. Did you know that Chrome\n  OS team uses a robot solution from OptoFidelity to measure end-to-end latency of Android and Chrome OS devices?", "Mobile development is hard. Building test infrastructure is hard. Working cross-platform is hard.\n  Combine the three and you have a recipe for disaster. In this talk, Dan Giovannelli will share his\n  experiences working on a cross-platform mobile test infrastructure project. He'll discuss the things\n  that went right, the things that went (very) wrong, and what he wishes now he knew starting out.\n  Come for insights on designing mobile tools for non-mobile engineers, stay to find out just what\n  the heck The Matrix is and how to beat it at its own game.", "Luckily there are ways to use standard mobile test automation frameworks to drive test automation\n  on real mobile devices for games by using some creativity and publically available libraries. In\n  his presentation, Jouko Kaasila from Testdroid will discuss three different approaches with real\n  world examples and some sample code.", "I will take you through a fun journey of translating E2E test into component test that will give\n  you confidence in the final product. Hopefully this will give you a fresh perspective when you look\n  at your own product.", "The internet of things has led to a proliferation of connected devices. Validating behavior across\n  diverse interoperating devices is a significant testing challenge. To test Chromecast, several\n  approaches were taken.  We outline test frameworks, lab infrastructure and test tooling that we\n  developed to generate reliable quality signals from the product. We detail the challenges of testing\n  a product that operates in noisy networked environments. We propose that test tooling for devices\n  such as Chromecast is in its infancy and presents opportunities for innovation in software test engineering.", "", "Flaky tests are the bugbear of any automated test engineer; as someone (probably Alister) once said\n  \u201cinsanity is running the same tests over and over again and getting different results\u201d.\n  Flaky tests cause no end of despair, but perhaps there\u2019s no such thing as a flaky or non-flaky test,\n  perhaps we need to look at this problem through a different lens. We should spend more time building\n  more deterministic, more testable systems than spending time building resilient and persistent tests.\n  Alister will share some examples of when test flakiness hid real problems underneath the system,\n  and how it\u2019s possible to solve test flakiness by building better systems.", "Automated visual testing is a major emerging trend in the dev / test community. In this talk you will\n  learn what visual testing is and why it should be automated. We will take a deep dive into some of\n  the technological challenges involved with visual test automation and show how modern tools address\n  them. We will demo cutting edge technologies that enable running cross browser and cross device\n  visual tests, and provide key tips for succeeding with large scale visual testing.", "Also, we've just open sourced the tool and it is quickly becoming one of the most popular among\n  Twitter's open source projects.", "This talk will introduce the core accessibility affordances on the Android platform and illustrate\n  some common developer pitfalls related to accessibility. You\u2019ll learn about the new Android Accessibility\n  Test Framework and its integration into the Espresso and Robolectric testing frameworks. Finally,\n  you\u2019ll learn how easy it is to add automated accessibility checking to your your existing Android project tests.", "Our technique catches rare/boundary cases, keeps the sample size to a minimum, and implicitly\n  decreases the manual burden of looking at test outputs/diffs on the developers. It also supports\n  parallel execution (e.g. MapReduce) so that vast amounts of data can be processed in a short time-frame\n  to choose the sample.", "Nest\u2019s vision for the Thoughtful Home involves interconnected, intelligent devices working together\n  to make your home safer, more energy efficient, and more aware.  This talk will focus on the automation\n  infrastructure and test tools that have been built to help make that vision a reality.  Various teams\n  within Nest have been working on both cross-platform and device/feature specific systems for automated\n  regression test and analysis.  Using specific examples from real world product testing, we will\n  cover cross-product hardware in the loop testing infrastructure and power regression analysis tools,\n  along with camera and motion detection specific tool sets.", "This talk covers our experiences in developing and using software event generators at Splunk.\n  Inspired by particle physics where event generators have been indispensable in understanding the\n  physical world without running large experimental machines, log generators have improved the way\n  we test our numerous integrations with modern and legacy third-party software. The talk covers the\n  basic functionality and the challenges in generating realistic logs.", "In this talk, I will present a lightweight and scalable technique for synthesizing tests for detecting\n  thread-safety violations. Given a multi-threaded library and a sequential test suite, I will describe a\n  fully automated analysis that examines sequential execution traces, and produces as its output a concurrent\n  client program that drives shared objects via library method calls to states conducive for triggering a\n  concurrency bug. Experimental results on a variety of well-tested Java libraries demonstrate the\n  effectiveness of our approach in revealing many complex bugs.", "69+ million user's streaming experience is of paramount importance to Netflix. In order to swiftly\n  improve this, we moved the adaptive streaming algorithms into the Javascript layer. This posed a\n  unique challenge of frequently releasing client javascript software which directly impacted consumer's\n  streaming experience. Borrowing the continuous delivery paradigm, which has been widely and successfully\n  adopted for service applications, we used it to retire risk over the lifecycle of a checkin and\n  deliver updates frequently. In this talk we will describe a key component of this paradigm to enable\n  software updates. We will dive into rollout procedure of the javascript client and tools to accurately\n  compare the health against the current version. We will also share the challenges faced with this process.", "Mock the internet, talking about a new mocking system in Linkedin that helps to mock all the outbound\n  traffic for service level integration tests, will also talk a little bit about the overview of Linkedin\n  Mocking strategy. Share the knowledge and what we learnt with everyone.", "The existing GPS monitoring stations used by the Air Force have become difficult to maintain and\n  an effort is underway to replace them with a GPU accelerated Software Defined Radio (SDR) approach.\n  An overview of the unique testing challenges of this specialized GPS receiver along with an examination\n  of several testing approaches will be presented. While focused on a GPS application, these\n  testing approaches could easily be applied to other production level SDR efforts.", "As wearable technology is on the rise in personal and business use, all the companies which have\n  a solid space in the Android market have switched their focus on this upcoming technology. Thus\n  creating their apps with wearable support, which also increases the effort to test their app on\n  the wearable devices. Hence automation on the wearables becomes important to reduce testing effort\n  and increase efficiency.", "Developers struggle every day to have a working local development environment ready when developing,\n  debugging and going through the continues integration cycle.We can to solve that by integrating docker\n  and vagrant to be used with CI tool. This combination allows to control applications at stack level\n  on development machines, while able to use the same stack in integration tests.\n  In this talk we will discuss:", "Specializing static analysis techniques for test suites has yielded interesting results. We've\n  previously learned that most tests are simple straight-line code, namely a sequence of setup statements\n  followed by a payload consisting of asserts. We show how static analysis can identify useless setup\n  statements, enabling developers to simplify and speed up their test cases.", "The coverage of a test suite is often used as a proxy for its ability to detect faults.\n  However, previous studies that investigated the correlation between code coverage and test suite\n  effectiveness have failed to reach a consensus about the nature and strength of the relationship\n  between these test suite characteristics.  Moreover, many of the studies were done with small or\n  synthetic programs, making it unclear whether their results generalize to larger programs, and some\n  of the studies did not account for the confounding influence of test suite size.  We have extended\n  these studies by evaluating the relationship between test suite size, coverage, and effectiveness for\n  realistic Java programs; our study is the largest to date in the literature.  We measured the statement\n  coverage, decision coverage, and modified condition coverage of these suites and used mutation testing\n  to evaluate their fault detection effectiveness.  We found that there is a low to moderate correlation\n  between coverage and effectiveness when the number of test cases in the suite is controlled for.\n  In addition, we found that stronger forms of coverage do not provide greater insight into the effectiveness\n  the suite.", "Keeping tests fast and stable is critically important.  This is hard when servers depend on many\n  backends.  Developers must choose between long and flaky tests, or writing and maintaining fake\n  implementations.  Instead, tests can be run using recorded traffic from these backends.\n  This provides the best of both worlds, allowing developers to test quickly against real backends.", "Chrome OS is currently shipping 60+ different Chromebook/boxes each running their own software. On\n  the field, customers are getting a fresh system every 6 weeks. This would not be possible without a\n  robust Continuous Integration System vetting check-ins from our 200+ developers. In this talk, we\n  describe the overall architecture with specific emphasis on our test automation lab. In addition,\n  we discuss Moblab (short for mobile (test) lab), our entire test automation infrastructure running\n  from one chromebox. This system is used by many of our partners so that they too can run tests the\n  way we do."]}, "gtac_2013": {"titles": ["", "Opening Remarks", "Opening Keynote - Evolution from Quality Assurance to Test Engineering", "Testing Systems at Scale @Twitter", "How Do You Test a Mobile OS?", "Mobile Automation in Continuous Delivery Pipeline", "Automated Set-Top Box Testing with GStreamer and OpenCV", "Webdriver for Chrome", "Karma - Test Runner for JavaScript", "Automated Video Quality Measurements", "When Bad Things Happen to Good Applications...", "Testing for Educational Gaming and Educational Gaming for Testing", "Closing Keynote - How Facebook Tests Facebook on Android", "Opening Keynote - Testable JavaScript - Architecting Your Application for Testability", "Breaking the Matrix - Android Testing at Scale", "Android UI Automation", "Appium: Automation for Mobile Apps", "Building Scalable Mobile Test Infrastructure for Google+ Mobile", "Espresso: Fresh Start to Android UI Testing", "Web Performance Testing with WebDriver", "Continuous Maps Data Testing", "Finding Culprits Automatically in Failing Builds - i.e. Who Broke the Build?", "Empirical Investigation of Software Product Line Quality", "AddressSanitizer, ThreadSanitizer and MemorySanitizer -- Dynamic Testing Tools for C++", "Closing Keynote - Drinking the Ocean - Finding XSS at Google Scale"], "abstracts": ["", "", "This talk will focus on what test engineering is, how it evolved from quality assurance, and how the industry as a whole has implemented test engineering (with specific examples of how it is implemented at Google).", "James will be discussing the tools, process, and philosophy that goes into performance testing at Twitter. Particular emphasis will be placed on the Iago open source load testing library, which he wrote to enable Twitter's engineering teams to perform load tests before deploying code to production. The talk will dive into implementation details of some of these tests (including source code) and how complicating factors such as OAuth and arbitrary Thrift protocols are managed.", "This is the problem that confronted Mozilla when we decided to venture into the world of FirefoxOS. Where to start and how to do it was going to prove an interesting task. Come listen to how we solved this problem and how we created a new framework.", "Expedia started investing in Mobile Web and iOS/Android apps in early 2012. At the same time Test Engineers started developing test automation solutions to build quality and testability into the products from the beginning. In this talk, we will share our experience and learning of utilizing open source tools to build automated testing in Expedia's Agile development and continuous delivery environment. We will talk about Test Pyramid and go into more detail of specific open source tools that have worked well for us. Some of the open source tools we use are BDD tools such as Cucumber, web automation tool Selenium-WebDriver, iOS automation tool Frank, Android automation tools Robotium and Calabash, and Continuous Integration system Jenkins. In addition, we will share some of the Agile delivery principles we strive to adopt like TDD, Pair Programming, Build and Test Radiators. Finally, we will share some of the benefits we have realized from our investment in Agile and test automation and how that is getting us to our Continuous Delivery goals.", "A leading example of such a system is http://stb-tester.com, an open-source tool developed at YouView to automate the UI testing of our set-top boxes. We'll describe stb-tester, the flexibility offered by its GStreamer underpinnings, some of the possibilities it opens up, and the challenges ahead.", "From its start as a Windows-only browser, Chrome has expanded to Mac, Linux, ChromeOS, and most recently, Android and iOS. User level testing of web applications across these platforms has been difficult and necessitated various automation approaches. This talk will describe the work the Chrome team is doing to make WebDriver available for Chrome on all platforms. This will include a technical look at the underlying approach but will focus on how developers can use the new ChromeDriver to write tests for Chrome's various platforms. Also, the current state of the project and a roadmap for its future will be covered.", "Testing is not optional when one is building a JavaScript application that must work across many browsers and devices. However executing tests in all of these various environments is hard. Karma turns this typically painstaking task into a piece of cake. It allows you to execute JavaScript tests in real browsers or devices such as your phone or tablet directly from the comfort of your terminal or your favorite IDE.", "Yes, it is possible to automatically test complex, subjective measurements such as video quality! This talk will show how we constructed a continuous, automated end-to-end test of a WebRTC video call. We'll take a look at the toolchain at a high level and what challenges we ran into while constructing it. This is perfect if you want inspiration for how to take your media testing to the next level.", "The boom of mobile and tablet computing has inundated the software industry with application development platforms. Developing consumer applications on computing platforms have their own magical experience for the end users. Consumer facing software companies always attempt to put their best foot forward when they develop an application for these platforms. However, the biggest challenge in application development only begins after companies roll out the first version of the application. Consumers and the software companies want the latest features and functionalities out of development as soon as possible with the highest quality. This leads to constant code churn in every layer of the stack. We, UI automation engineers, build a variety of detection systems to catch application issues sooner than later. In this talk I will share some of our challenges and successes behind one such detection system, that helped find problems outside the application layer but still adversely impacted the user experience.", "", "Facebook is one of the most popular Android applications there is. In this talk, you'll find what Facebook does to ensure that each release is as good as it can be. We'll cover everything from how we manage our code, through our approaches to testing and all the way out to dogfooding.", "Join me to break down the process of writing testable JavaScript. We will investigate ideas, patterns, and methodologies that greatly increase the testability, and hence the maintainability, correctness, and longevity of your code. Whether you write client- or server-side JavaScript mastering this process will greatly enhance the quality of your code.", "\"I'm trying to free your mind, Neo. But I can only show you the door. You're the one that has to walk through it.\"", "As Android gains popularity in the mobile world, application developers and OEM vendors are exploring ways to perform end-to-end UI driven testing of applications or entire platform. With a brief review of existing UI Automation solutions on Android, this talk introduces the recently released Android UI Automator framework, and continues to give an inside look of the framework, typical use cases and workflows.", "Appium is is a Node.js server that automates native and hybrid mobile applications (both iOS and Android). Appium's philosophy dictates that apps should not be modified in order to be automated, and that you should be able to write your test code in any language or framework. The result is a Selenium WebDriver server that speaks mobile like a native. Appium runs on real devices and emulators and is completely open source, making it a wonderfully friendly way to get started with mobile test automation. In this talk I will outline the principles that inform Appium's design, talk about Appium in the space of other mobile automation frameworks, and introduce the architecture that makes the magic happen. Finally, I'll dig into the code for a simple test of a brand-new mobile app, and demonstrate Appium running this test on iPhone and Android.", "Testing native apps in a meaningful, stable and scalable way is a challenge. The G+ have developed efficient solutions to tackle these problems by providing the right infrastructure for each of the complex test scenarios that mobile presents. Our current test infrastructure provides the right tools to both iOS and Android apps to give our development team the confidence that new changes won't break existing clients.", "Developing a reliable Android test should be as quick and easy as pulling a shot of espresso. Unfortunately, with existing tools, it may feel more like making a double-shot-caramel-sauce-upside-down-si\u00adngle-whip-half-decaf-latte - confusing and rarely consistent. Espresso is a new Android test framework that lets you write concise, beautiful, and reliable UI tests quickly. The core API is small, predictable, and easy to learn - yet it is also open for customization. Espresso tests state their expectations, interactions, and assertions clearly without distracting boilerplate, custom infrastructure, or messy implementation details getting in the way. Tests run optimally fast - leave your waits, syncs, sleeps, and polls behind and let the framework gracefully manipulate and assert on your UI when it is at rest. Start enjoying writing and executing UI tests - try a shot of Espresso.", "I will demonstrate this with the new-generation ChromeDriver (WebDriver for the Chromium browser).", "Continuous testing is generally about running unit tests and integration tests. But when the data that your server processes is actually the biggest cause of change, how do you ensure that consumers of the data still find it useable and that nothing crashes under the rate of change or a bad change? We'll discuss techniques for continuous data testing with examples from Google Maps.", "Our culprit finder targets finding the culprit CL for large builds automatically, in a very short time-frame with high success. Based on production usage on multiple projects in the last 9 months, culprit finder provides very promising results. Come see our talk to see how we implemented the culprit finder, how successful it is in production and what it feels and looks like.", "Software product lines exhibit high degree of commonality among the systems in the product line and a well specified number of possible variations. Based on data extracted from two case studies - a medium size industrial product line and a large, evolving open source product line - we explored empirically if the systematic reuse improves the quality and supports successful prediction of potential future faults from previously experienced faults, source code metrics, and change metrics. Our research results confirmed, in a software product line setting, the findings of others that faults are more highly correlated to change metrics than to static code metrics. The quality assessment results showed that although older packages (including commonalities) continually changed, they retained low fault densities. Furthermore, the open source product line improved in quality as it evolved through releases. The prediction based on generalized linear regression models accurately ranked the packages according to their post-release faults using the models built on the previous release. The results also revealed that post-release fault predictions benefit from additional product line information.", "AddressSanitizer (ASan) is a tool that finds buffer overflows (in stack, heap and globals) and use-after-free bugs in C/C++ programs.\n  ThreadSanitizer (TSan) finds data races in C/C++ and Go programs.\n  MemorySanitizer (MSan) is a work-in-progress tool that finds uses of uninitialized memory (C++).\n  These tools are based on compiler instrumentation (LLVM and GCC), which makes them very fast (e.g. ASan incurs just 2x slowdown).\n  We will share our experience in huge scale testing using these tools.", "In this talk we outline our novel approach, the challenges we faced in scaling our system to Google size and the ideas behind our detection and crawling models on JavaScript intensive applications."]}}